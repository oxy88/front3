# source: http://localhost:4466/front3/dev
# timestamp: Wed May 16 2018 11:51:22 GMT+0900 (KST)

type AggregateAnyProfile {
  count: Int!
}

type AggregateBasketBallProfile {
  count: Int!
}

type AggregateEtcGamesProfile {
  count: Int!
}

type AggregateEtcSportsProfile {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateInterest {
  count: Int!
}

type AggregateLolProfile {
  count: Int!
}

type AggregateOverwatchProfile {
  count: Int!
}

type AggregatePubgProfile {
  count: Int!
}

type AggregateSoccerProfile {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AnyProfile implements Node {
  id: ID!
  topic: String!
  description: String
}

"""A connection to a list of items."""
type AnyProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnyProfileEdge]!
  aggregate: AggregateAnyProfile!
}

input AnyProfileCreateInput {
  topic: String!
  description: String
}

input AnyProfileCreateOneInput {
  create: AnyProfileCreateInput
  connect: AnyProfileWhereUniqueInput
}

"""An edge in a connection."""
type AnyProfileEdge {
  """The item at the end of the edge."""
  node: AnyProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnyProfileOrderByInput {
  id_ASC
  id_DESC
  topic_ASC
  topic_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnyProfilePreviousValues {
  id: ID!
  topic: String!
  description: String
}

type AnyProfileSubscriptionPayload {
  mutation: MutationType!
  node: AnyProfile
  updatedFields: [String!]
  previousValues: AnyProfilePreviousValues
}

input AnyProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnyProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnyProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnyProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnyProfileWhereInput
}

input AnyProfileUpdateDataInput {
  topic: String
  description: String
}

input AnyProfileUpdateInput {
  topic: String
  description: String
}

input AnyProfileUpdateOneInput {
  create: AnyProfileCreateInput
  connect: AnyProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AnyProfileUpdateDataInput
  upsert: AnyProfileUpsertNestedInput
}

input AnyProfileUpsertNestedInput {
  update: AnyProfileUpdateDataInput!
  create: AnyProfileCreateInput!
}

input AnyProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [AnyProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnyProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnyProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  topic: String

  """All values that are not equal to given value."""
  topic_not: String

  """All values that are contained in given list."""
  topic_in: [String!]

  """All values that are not contained in given list."""
  topic_not_in: [String!]

  """All values less than the given value."""
  topic_lt: String

  """All values less than or equal the given value."""
  topic_lte: String

  """All values greater than the given value."""
  topic_gt: String

  """All values greater than or equal the given value."""
  topic_gte: String

  """All values containing the given string."""
  topic_contains: String

  """All values not containing the given string."""
  topic_not_contains: String

  """All values starting with the given string."""
  topic_starts_with: String

  """All values not starting with the given string."""
  topic_not_starts_with: String

  """All values ending with the given string."""
  topic_ends_with: String

  """All values not ending with the given string."""
  topic_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input AnyProfileWhereUniqueInput {
  id: ID
}

type BasketBallProfile implements Node {
  id: ID!
  description: String
  role: BasketBallRole!
}

"""A connection to a list of items."""
type BasketBallProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BasketBallProfileEdge]!
  aggregate: AggregateBasketBallProfile!
}

input BasketBallProfileCreateInput {
  description: String
  role: BasketBallRole!
}

input BasketBallProfileCreateOneInput {
  create: BasketBallProfileCreateInput
  connect: BasketBallProfileWhereUniqueInput
}

"""An edge in a connection."""
type BasketBallProfileEdge {
  """The item at the end of the edge."""
  node: BasketBallProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BasketBallProfileOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BasketBallProfilePreviousValues {
  id: ID!
  description: String
  role: BasketBallRole!
}

type BasketBallProfileSubscriptionPayload {
  mutation: MutationType!
  node: BasketBallProfile
  updatedFields: [String!]
  previousValues: BasketBallProfilePreviousValues
}

input BasketBallProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BasketBallProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BasketBallProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BasketBallProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BasketBallProfileWhereInput
}

input BasketBallProfileUpdateDataInput {
  description: String
  role: BasketBallRole
}

input BasketBallProfileUpdateInput {
  description: String
  role: BasketBallRole
}

input BasketBallProfileUpdateOneInput {
  create: BasketBallProfileCreateInput
  connect: BasketBallProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BasketBallProfileUpdateDataInput
  upsert: BasketBallProfileUpsertNestedInput
}

input BasketBallProfileUpsertNestedInput {
  update: BasketBallProfileUpdateDataInput!
  create: BasketBallProfileCreateInput!
}

input BasketBallProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [BasketBallProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [BasketBallProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BasketBallProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  role: BasketBallRole

  """All values that are not equal to given value."""
  role_not: BasketBallRole

  """All values that are contained in given list."""
  role_in: [BasketBallRole!]

  """All values that are not contained in given list."""
  role_not_in: [BasketBallRole!]
}

input BasketBallProfileWhereUniqueInput {
  id: ID
}

enum BasketBallRole {
  FILL
  GUARD
  FORWARD
  CENTER
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum Category {
  LOL
  PUBG
  OVERWATCH
  ETC_GAMES
  SOCCER
  BASKET_BALL
  ETC_SPORTS
  ANY
}

scalar DateTime

type EtcGamesProfile implements Node {
  id: ID!
  gameName: String!
  name: String
  stats: String
}

"""A connection to a list of items."""
type EtcGamesProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EtcGamesProfileEdge]!
  aggregate: AggregateEtcGamesProfile!
}

input EtcGamesProfileCreateInput {
  gameName: String!
  name: String
  stats: String
}

input EtcGamesProfileCreateOneInput {
  create: EtcGamesProfileCreateInput
  connect: EtcGamesProfileWhereUniqueInput
}

"""An edge in a connection."""
type EtcGamesProfileEdge {
  """The item at the end of the edge."""
  node: EtcGamesProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EtcGamesProfileOrderByInput {
  id_ASC
  id_DESC
  gameName_ASC
  gameName_DESC
  name_ASC
  name_DESC
  stats_ASC
  stats_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EtcGamesProfilePreviousValues {
  id: ID!
  gameName: String!
  name: String
  stats: String
}

type EtcGamesProfileSubscriptionPayload {
  mutation: MutationType!
  node: EtcGamesProfile
  updatedFields: [String!]
  previousValues: EtcGamesProfilePreviousValues
}

input EtcGamesProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EtcGamesProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EtcGamesProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EtcGamesProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EtcGamesProfileWhereInput
}

input EtcGamesProfileUpdateDataInput {
  gameName: String
  name: String
  stats: String
}

input EtcGamesProfileUpdateInput {
  gameName: String
  name: String
  stats: String
}

input EtcGamesProfileUpdateOneInput {
  create: EtcGamesProfileCreateInput
  connect: EtcGamesProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EtcGamesProfileUpdateDataInput
  upsert: EtcGamesProfileUpsertNestedInput
}

input EtcGamesProfileUpsertNestedInput {
  update: EtcGamesProfileUpdateDataInput!
  create: EtcGamesProfileCreateInput!
}

input EtcGamesProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [EtcGamesProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [EtcGamesProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EtcGamesProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gameName: String

  """All values that are not equal to given value."""
  gameName_not: String

  """All values that are contained in given list."""
  gameName_in: [String!]

  """All values that are not contained in given list."""
  gameName_not_in: [String!]

  """All values less than the given value."""
  gameName_lt: String

  """All values less than or equal the given value."""
  gameName_lte: String

  """All values greater than the given value."""
  gameName_gt: String

  """All values greater than or equal the given value."""
  gameName_gte: String

  """All values containing the given string."""
  gameName_contains: String

  """All values not containing the given string."""
  gameName_not_contains: String

  """All values starting with the given string."""
  gameName_starts_with: String

  """All values not starting with the given string."""
  gameName_not_starts_with: String

  """All values ending with the given string."""
  gameName_ends_with: String

  """All values not ending with the given string."""
  gameName_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  stats: String

  """All values that are not equal to given value."""
  stats_not: String

  """All values that are contained in given list."""
  stats_in: [String!]

  """All values that are not contained in given list."""
  stats_not_in: [String!]

  """All values less than the given value."""
  stats_lt: String

  """All values less than or equal the given value."""
  stats_lte: String

  """All values greater than the given value."""
  stats_gt: String

  """All values greater than or equal the given value."""
  stats_gte: String

  """All values containing the given string."""
  stats_contains: String

  """All values not containing the given string."""
  stats_not_contains: String

  """All values starting with the given string."""
  stats_starts_with: String

  """All values not starting with the given string."""
  stats_not_starts_with: String

  """All values ending with the given string."""
  stats_ends_with: String

  """All values not ending with the given string."""
  stats_not_ends_with: String
}

input EtcGamesProfileWhereUniqueInput {
  id: ID
}

type EtcSportsProfile implements Node {
  id: ID!
  sportsName: String!
  stats: String
  description: String
}

"""A connection to a list of items."""
type EtcSportsProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EtcSportsProfileEdge]!
  aggregate: AggregateEtcSportsProfile!
}

input EtcSportsProfileCreateInput {
  sportsName: String!
  stats: String
  description: String
}

input EtcSportsProfileCreateOneInput {
  create: EtcSportsProfileCreateInput
  connect: EtcSportsProfileWhereUniqueInput
}

"""An edge in a connection."""
type EtcSportsProfileEdge {
  """The item at the end of the edge."""
  node: EtcSportsProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EtcSportsProfileOrderByInput {
  id_ASC
  id_DESC
  sportsName_ASC
  sportsName_DESC
  stats_ASC
  stats_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EtcSportsProfilePreviousValues {
  id: ID!
  sportsName: String!
  stats: String
  description: String
}

type EtcSportsProfileSubscriptionPayload {
  mutation: MutationType!
  node: EtcSportsProfile
  updatedFields: [String!]
  previousValues: EtcSportsProfilePreviousValues
}

input EtcSportsProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EtcSportsProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EtcSportsProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EtcSportsProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EtcSportsProfileWhereInput
}

input EtcSportsProfileUpdateDataInput {
  sportsName: String
  stats: String
  description: String
}

input EtcSportsProfileUpdateInput {
  sportsName: String
  stats: String
  description: String
}

input EtcSportsProfileUpdateOneInput {
  create: EtcSportsProfileCreateInput
  connect: EtcSportsProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EtcSportsProfileUpdateDataInput
  upsert: EtcSportsProfileUpsertNestedInput
}

input EtcSportsProfileUpsertNestedInput {
  update: EtcSportsProfileUpdateDataInput!
  create: EtcSportsProfileCreateInput!
}

input EtcSportsProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [EtcSportsProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [EtcSportsProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EtcSportsProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sportsName: String

  """All values that are not equal to given value."""
  sportsName_not: String

  """All values that are contained in given list."""
  sportsName_in: [String!]

  """All values that are not contained in given list."""
  sportsName_not_in: [String!]

  """All values less than the given value."""
  sportsName_lt: String

  """All values less than or equal the given value."""
  sportsName_lte: String

  """All values greater than the given value."""
  sportsName_gt: String

  """All values greater than or equal the given value."""
  sportsName_gte: String

  """All values containing the given string."""
  sportsName_contains: String

  """All values not containing the given string."""
  sportsName_not_contains: String

  """All values starting with the given string."""
  sportsName_starts_with: String

  """All values not starting with the given string."""
  sportsName_not_starts_with: String

  """All values ending with the given string."""
  sportsName_ends_with: String

  """All values not ending with the given string."""
  sportsName_not_ends_with: String
  stats: String

  """All values that are not equal to given value."""
  stats_not: String

  """All values that are contained in given list."""
  stats_in: [String!]

  """All values that are not contained in given list."""
  stats_not_in: [String!]

  """All values less than the given value."""
  stats_lt: String

  """All values less than or equal the given value."""
  stats_lte: String

  """All values greater than the given value."""
  stats_gt: String

  """All values greater than or equal the given value."""
  stats_gte: String

  """All values containing the given string."""
  stats_contains: String

  """All values not containing the given string."""
  stats_not_contains: String

  """All values starting with the given string."""
  stats_starts_with: String

  """All values not starting with the given string."""
  stats_not_starts_with: String

  """All values ending with the given string."""
  stats_ends_with: String

  """All values not ending with the given string."""
  stats_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input EtcSportsProfileWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  name: String
  iconUrl: String
  category: Category
  type: EventType
  startTime: DateTime
  place: String
  owner(where: UserWhereInput): User
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  name: String
  iconUrl: String
  category: Category
  type: EventType
  startTime: DateTime
  place: String
  owner: UserCreateOneWithoutEventsInput
}

input EventCreateManyWithoutOwnerInput {
  create: [EventCreateWithoutOwnerInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutOwnerInput {
  name: String
  iconUrl: String
  category: Category
  type: EventType
  startTime: DateTime
  place: String
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  iconUrl_ASC
  iconUrl_DESC
  category_ASC
  category_DESC
  type_ASC
  type_DESC
  startTime_ASC
  startTime_DESC
  place_ASC
  place_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String
  iconUrl: String
  category: Category
  type: EventType
  startTime: DateTime
  place: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

enum EventType {
  TOURNAMENT
  LEAGUE
  ETC
}

input EventUpdateInput {
  name: String
  iconUrl: String
  category: Category
  type: EventType
  startTime: DateTime
  place: String
  owner: UserUpdateOneWithoutEventsInput
}

input EventUpdateManyWithoutOwnerInput {
  create: [EventCreateWithoutOwnerInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutOwnerInput!]
}

input EventUpdateWithoutOwnerDataInput {
  name: String
  iconUrl: String
  category: Category
  type: EventType
  startTime: DateTime
  place: String
}

input EventUpdateWithWhereUniqueWithoutOwnerInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutOwnerDataInput!
}

input EventUpsertWithWhereUniqueWithoutOwnerInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutOwnerDataInput!
  create: EventCreateWithoutOwnerInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  iconUrl: String

  """All values that are not equal to given value."""
  iconUrl_not: String

  """All values that are contained in given list."""
  iconUrl_in: [String!]

  """All values that are not contained in given list."""
  iconUrl_not_in: [String!]

  """All values less than the given value."""
  iconUrl_lt: String

  """All values less than or equal the given value."""
  iconUrl_lte: String

  """All values greater than the given value."""
  iconUrl_gt: String

  """All values greater than or equal the given value."""
  iconUrl_gte: String

  """All values containing the given string."""
  iconUrl_contains: String

  """All values not containing the given string."""
  iconUrl_not_contains: String

  """All values starting with the given string."""
  iconUrl_starts_with: String

  """All values not starting with the given string."""
  iconUrl_not_starts_with: String

  """All values ending with the given string."""
  iconUrl_ends_with: String

  """All values not ending with the given string."""
  iconUrl_not_ends_with: String
  category: Category

  """All values that are not equal to given value."""
  category_not: Category

  """All values that are contained in given list."""
  category_in: [Category!]

  """All values that are not contained in given list."""
  category_not_in: [Category!]
  type: EventType

  """All values that are not equal to given value."""
  type_not: EventType

  """All values that are contained in given list."""
  type_in: [EventType!]

  """All values that are not contained in given list."""
  type_not_in: [EventType!]
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  place: String

  """All values that are not equal to given value."""
  place_not: String

  """All values that are contained in given list."""
  place_in: [String!]

  """All values that are not contained in given list."""
  place_not_in: [String!]

  """All values less than the given value."""
  place_lt: String

  """All values less than or equal the given value."""
  place_lte: String

  """All values greater than the given value."""
  place_gt: String

  """All values greater than or equal the given value."""
  place_gte: String

  """All values containing the given string."""
  place_contains: String

  """All values not containing the given string."""
  place_not_contains: String

  """All values starting with the given string."""
  place_starts_with: String

  """All values not starting with the given string."""
  place_not_starts_with: String

  """All values ending with the given string."""
  place_ends_with: String

  """All values not ending with the given string."""
  place_not_ends_with: String
  owner: UserWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Interest implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  category: Category
  description: String
  lol(where: LolProfileWhereInput): LolProfile
  pubg(where: PubgProfileWhereInput): PubgProfile
  overwatch(where: OverwatchProfileWhereInput): OverwatchProfile
  etcGames(where: EtcGamesProfileWhereInput): EtcGamesProfile
  soccer(where: SoccerProfileWhereInput): SoccerProfile
  basketBall(where: BasketBallProfileWhereInput): BasketBallProfile
  etcSports(where: EtcSportsProfileWhereInput): EtcSportsProfile
  any(where: AnyProfileWhereInput): AnyProfile
}

"""A connection to a list of items."""
type InterestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterestEdge]!
  aggregate: AggregateInterest!
}

input InterestCreateInput {
  category: Category
  description: String
  user: UserCreateOneWithoutInterestsInput!
  lol: LolProfileCreateOneInput
  pubg: PubgProfileCreateOneInput
  overwatch: OverwatchProfileCreateOneInput
  etcGames: EtcGamesProfileCreateOneInput
  soccer: SoccerProfileCreateOneInput
  basketBall: BasketBallProfileCreateOneInput
  etcSports: EtcSportsProfileCreateOneInput
  any: AnyProfileCreateOneInput
}

input InterestCreateManyWithoutUserInput {
  create: [InterestCreateWithoutUserInput!]
  connect: [InterestWhereUniqueInput!]
}

input InterestCreateWithoutUserInput {
  category: Category
  description: String
  lol: LolProfileCreateOneInput
  pubg: PubgProfileCreateOneInput
  overwatch: OverwatchProfileCreateOneInput
  etcGames: EtcGamesProfileCreateOneInput
  soccer: SoccerProfileCreateOneInput
  basketBall: BasketBallProfileCreateOneInput
  etcSports: EtcSportsProfileCreateOneInput
  any: AnyProfileCreateOneInput
}

"""An edge in a connection."""
type InterestEdge {
  """The item at the end of the edge."""
  node: Interest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InterestOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InterestPreviousValues {
  id: ID!
  category: Category
  description: String
}

type InterestSubscriptionPayload {
  mutation: MutationType!
  node: Interest
  updatedFields: [String!]
  previousValues: InterestPreviousValues
}

input InterestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InterestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterestWhereInput
}

input InterestUpdateInput {
  category: Category
  description: String
  user: UserUpdateOneWithoutInterestsInput
  lol: LolProfileUpdateOneInput
  pubg: PubgProfileUpdateOneInput
  overwatch: OverwatchProfileUpdateOneInput
  etcGames: EtcGamesProfileUpdateOneInput
  soccer: SoccerProfileUpdateOneInput
  basketBall: BasketBallProfileUpdateOneInput
  etcSports: EtcSportsProfileUpdateOneInput
  any: AnyProfileUpdateOneInput
}

input InterestUpdateManyWithoutUserInput {
  create: [InterestCreateWithoutUserInput!]
  connect: [InterestWhereUniqueInput!]
  disconnect: [InterestWhereUniqueInput!]
  delete: [InterestWhereUniqueInput!]
  update: [InterestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [InterestUpsertWithWhereUniqueWithoutUserInput!]
}

input InterestUpdateWithoutUserDataInput {
  category: Category
  description: String
  lol: LolProfileUpdateOneInput
  pubg: PubgProfileUpdateOneInput
  overwatch: OverwatchProfileUpdateOneInput
  etcGames: EtcGamesProfileUpdateOneInput
  soccer: SoccerProfileUpdateOneInput
  basketBall: BasketBallProfileUpdateOneInput
  etcSports: EtcSportsProfileUpdateOneInput
  any: AnyProfileUpdateOneInput
}

input InterestUpdateWithWhereUniqueWithoutUserInput {
  where: InterestWhereUniqueInput!
  data: InterestUpdateWithoutUserDataInput!
}

input InterestUpsertWithWhereUniqueWithoutUserInput {
  where: InterestWhereUniqueInput!
  update: InterestUpdateWithoutUserDataInput!
  create: InterestCreateWithoutUserInput!
}

input InterestWhereInput {
  """Logical AND on all given filters."""
  AND: [InterestWhereInput!]

  """Logical OR on all given filters."""
  OR: [InterestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InterestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: Category

  """All values that are not equal to given value."""
  category_not: Category

  """All values that are contained in given list."""
  category_in: [Category!]

  """All values that are not contained in given list."""
  category_not_in: [Category!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  user: UserWhereInput
  lol: LolProfileWhereInput
  pubg: PubgProfileWhereInput
  overwatch: OverwatchProfileWhereInput
  etcGames: EtcGamesProfileWhereInput
  soccer: SoccerProfileWhereInput
  basketBall: BasketBallProfileWhereInput
  etcSports: EtcSportsProfileWhereInput
  any: AnyProfileWhereInput
}

input InterestWhereUniqueInput {
  id: ID
}

type LolProfile implements Node {
  id: ID!
  name: String!
  tier: LolTier!
  role: LolRole!
}

"""A connection to a list of items."""
type LolProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LolProfileEdge]!
  aggregate: AggregateLolProfile!
}

input LolProfileCreateInput {
  name: String!
  tier: LolTier!
  role: LolRole!
}

input LolProfileCreateOneInput {
  create: LolProfileCreateInput
  connect: LolProfileWhereUniqueInput
}

"""An edge in a connection."""
type LolProfileEdge {
  """The item at the end of the edge."""
  node: LolProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LolProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  tier_ASC
  tier_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LolProfilePreviousValues {
  id: ID!
  name: String!
  tier: LolTier!
  role: LolRole!
}

type LolProfileSubscriptionPayload {
  mutation: MutationType!
  node: LolProfile
  updatedFields: [String!]
  previousValues: LolProfilePreviousValues
}

input LolProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LolProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LolProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LolProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LolProfileWhereInput
}

input LolProfileUpdateDataInput {
  name: String
  tier: LolTier
  role: LolRole
}

input LolProfileUpdateInput {
  name: String
  tier: LolTier
  role: LolRole
}

input LolProfileUpdateOneInput {
  create: LolProfileCreateInput
  connect: LolProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LolProfileUpdateDataInput
  upsert: LolProfileUpsertNestedInput
}

input LolProfileUpsertNestedInput {
  update: LolProfileUpdateDataInput!
  create: LolProfileCreateInput!
}

input LolProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [LolProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [LolProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LolProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  tier: LolTier

  """All values that are not equal to given value."""
  tier_not: LolTier

  """All values that are contained in given list."""
  tier_in: [LolTier!]

  """All values that are not contained in given list."""
  tier_not_in: [LolTier!]
  role: LolRole

  """All values that are not equal to given value."""
  role_not: LolRole

  """All values that are contained in given list."""
  role_in: [LolRole!]

  """All values that are not contained in given list."""
  role_not_in: [LolRole!]
}

input LolProfileWhereUniqueInput {
  id: ID
}

enum LolRole {
  FILL
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

enum LolTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTeam(data: TeamCreateInput!): Team!
  createEvent(data: EventCreateInput!): Event!
  createInterest(data: InterestCreateInput!): Interest!
  createLolProfile(data: LolProfileCreateInput!): LolProfile!
  createPubgProfile(data: PubgProfileCreateInput!): PubgProfile!
  createOverwatchProfile(data: OverwatchProfileCreateInput!): OverwatchProfile!
  createEtcGamesProfile(data: EtcGamesProfileCreateInput!): EtcGamesProfile!
  createSoccerProfile(data: SoccerProfileCreateInput!): SoccerProfile!
  createBasketBallProfile(data: BasketBallProfileCreateInput!): BasketBallProfile!
  createEtcSportsProfile(data: EtcSportsProfileCreateInput!): EtcSportsProfile!
  createAnyProfile(data: AnyProfileCreateInput!): AnyProfile!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateInterest(data: InterestUpdateInput!, where: InterestWhereUniqueInput!): Interest
  updateLolProfile(data: LolProfileUpdateInput!, where: LolProfileWhereUniqueInput!): LolProfile
  updatePubgProfile(data: PubgProfileUpdateInput!, where: PubgProfileWhereUniqueInput!): PubgProfile
  updateOverwatchProfile(data: OverwatchProfileUpdateInput!, where: OverwatchProfileWhereUniqueInput!): OverwatchProfile
  updateEtcGamesProfile(data: EtcGamesProfileUpdateInput!, where: EtcGamesProfileWhereUniqueInput!): EtcGamesProfile
  updateSoccerProfile(data: SoccerProfileUpdateInput!, where: SoccerProfileWhereUniqueInput!): SoccerProfile
  updateBasketBallProfile(data: BasketBallProfileUpdateInput!, where: BasketBallProfileWhereUniqueInput!): BasketBallProfile
  updateEtcSportsProfile(data: EtcSportsProfileUpdateInput!, where: EtcSportsProfileWhereUniqueInput!): EtcSportsProfile
  updateAnyProfile(data: AnyProfileUpdateInput!, where: AnyProfileWhereUniqueInput!): AnyProfile
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteInterest(where: InterestWhereUniqueInput!): Interest
  deleteLolProfile(where: LolProfileWhereUniqueInput!): LolProfile
  deletePubgProfile(where: PubgProfileWhereUniqueInput!): PubgProfile
  deleteOverwatchProfile(where: OverwatchProfileWhereUniqueInput!): OverwatchProfile
  deleteEtcGamesProfile(where: EtcGamesProfileWhereUniqueInput!): EtcGamesProfile
  deleteSoccerProfile(where: SoccerProfileWhereUniqueInput!): SoccerProfile
  deleteBasketBallProfile(where: BasketBallProfileWhereUniqueInput!): BasketBallProfile
  deleteEtcSportsProfile(where: EtcSportsProfileWhereUniqueInput!): EtcSportsProfile
  deleteAnyProfile(where: AnyProfileWhereUniqueInput!): AnyProfile
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertInterest(where: InterestWhereUniqueInput!, create: InterestCreateInput!, update: InterestUpdateInput!): Interest!
  upsertLolProfile(where: LolProfileWhereUniqueInput!, create: LolProfileCreateInput!, update: LolProfileUpdateInput!): LolProfile!
  upsertPubgProfile(where: PubgProfileWhereUniqueInput!, create: PubgProfileCreateInput!, update: PubgProfileUpdateInput!): PubgProfile!
  upsertOverwatchProfile(where: OverwatchProfileWhereUniqueInput!, create: OverwatchProfileCreateInput!, update: OverwatchProfileUpdateInput!): OverwatchProfile!
  upsertEtcGamesProfile(where: EtcGamesProfileWhereUniqueInput!, create: EtcGamesProfileCreateInput!, update: EtcGamesProfileUpdateInput!): EtcGamesProfile!
  upsertSoccerProfile(where: SoccerProfileWhereUniqueInput!, create: SoccerProfileCreateInput!, update: SoccerProfileUpdateInput!): SoccerProfile!
  upsertBasketBallProfile(where: BasketBallProfileWhereUniqueInput!, create: BasketBallProfileCreateInput!, update: BasketBallProfileUpdateInput!): BasketBallProfile!
  upsertEtcSportsProfile(where: EtcSportsProfileWhereUniqueInput!, create: EtcSportsProfileCreateInput!, update: EtcSportsProfileUpdateInput!): EtcSportsProfile!
  upsertAnyProfile(where: AnyProfileWhereUniqueInput!, create: AnyProfileCreateInput!, update: AnyProfileUpdateInput!): AnyProfile!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateInput!, where: TeamWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  updateManyInterests(data: InterestUpdateInput!, where: InterestWhereInput): BatchPayload!
  updateManyLolProfiles(data: LolProfileUpdateInput!, where: LolProfileWhereInput): BatchPayload!
  updateManyPubgProfiles(data: PubgProfileUpdateInput!, where: PubgProfileWhereInput): BatchPayload!
  updateManyOverwatchProfiles(data: OverwatchProfileUpdateInput!, where: OverwatchProfileWhereInput): BatchPayload!
  updateManyEtcGamesProfiles(data: EtcGamesProfileUpdateInput!, where: EtcGamesProfileWhereInput): BatchPayload!
  updateManySoccerProfiles(data: SoccerProfileUpdateInput!, where: SoccerProfileWhereInput): BatchPayload!
  updateManyBasketBallProfiles(data: BasketBallProfileUpdateInput!, where: BasketBallProfileWhereInput): BatchPayload!
  updateManyEtcSportsProfiles(data: EtcSportsProfileUpdateInput!, where: EtcSportsProfileWhereInput): BatchPayload!
  updateManyAnyProfiles(data: AnyProfileUpdateInput!, where: AnyProfileWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyInterests(where: InterestWhereInput): BatchPayload!
  deleteManyLolProfiles(where: LolProfileWhereInput): BatchPayload!
  deleteManyPubgProfiles(where: PubgProfileWhereInput): BatchPayload!
  deleteManyOverwatchProfiles(where: OverwatchProfileWhereInput): BatchPayload!
  deleteManyEtcGamesProfiles(where: EtcGamesProfileWhereInput): BatchPayload!
  deleteManySoccerProfiles(where: SoccerProfileWhereInput): BatchPayload!
  deleteManyBasketBallProfiles(where: BasketBallProfileWhereInput): BatchPayload!
  deleteManyEtcSportsProfiles(where: EtcSportsProfileWhereInput): BatchPayload!
  deleteManyAnyProfiles(where: AnyProfileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OverwatchProfile implements Node {
  id: ID!
  name: String!
  rating: Int
  tier: OverwatchTier!
  role: OverwatchRole!
}

"""A connection to a list of items."""
type OverwatchProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OverwatchProfileEdge]!
  aggregate: AggregateOverwatchProfile!
}

input OverwatchProfileCreateInput {
  name: String!
  rating: Int
  tier: OverwatchTier!
  role: OverwatchRole!
}

input OverwatchProfileCreateOneInput {
  create: OverwatchProfileCreateInput
  connect: OverwatchProfileWhereUniqueInput
}

"""An edge in a connection."""
type OverwatchProfileEdge {
  """The item at the end of the edge."""
  node: OverwatchProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OverwatchProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rating_ASC
  rating_DESC
  tier_ASC
  tier_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OverwatchProfilePreviousValues {
  id: ID!
  name: String!
  rating: Int
  tier: OverwatchTier!
  role: OverwatchRole!
}

type OverwatchProfileSubscriptionPayload {
  mutation: MutationType!
  node: OverwatchProfile
  updatedFields: [String!]
  previousValues: OverwatchProfilePreviousValues
}

input OverwatchProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OverwatchProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OverwatchProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OverwatchProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OverwatchProfileWhereInput
}

input OverwatchProfileUpdateDataInput {
  name: String
  rating: Int
  tier: OverwatchTier
  role: OverwatchRole
}

input OverwatchProfileUpdateInput {
  name: String
  rating: Int
  tier: OverwatchTier
  role: OverwatchRole
}

input OverwatchProfileUpdateOneInput {
  create: OverwatchProfileCreateInput
  connect: OverwatchProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OverwatchProfileUpdateDataInput
  upsert: OverwatchProfileUpsertNestedInput
}

input OverwatchProfileUpsertNestedInput {
  update: OverwatchProfileUpdateDataInput!
  create: OverwatchProfileCreateInput!
}

input OverwatchProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [OverwatchProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [OverwatchProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OverwatchProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  tier: OverwatchTier

  """All values that are not equal to given value."""
  tier_not: OverwatchTier

  """All values that are contained in given list."""
  tier_in: [OverwatchTier!]

  """All values that are not contained in given list."""
  tier_not_in: [OverwatchTier!]
  role: OverwatchRole

  """All values that are not equal to given value."""
  role_not: OverwatchRole

  """All values that are contained in given list."""
  role_in: [OverwatchRole!]

  """All values that are not contained in given list."""
  role_not_in: [OverwatchRole!]
}

input OverwatchProfileWhereUniqueInput {
  id: ID
}

enum OverwatchRole {
  FILL
  TANK
  DPS
  HEAL
}

enum OverwatchTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PubgProfile implements Node {
  id: ID!
  name: String!
  server: PubgServer!
  rating: Int
}

"""A connection to a list of items."""
type PubgProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PubgProfileEdge]!
  aggregate: AggregatePubgProfile!
}

input PubgProfileCreateInput {
  name: String!
  server: PubgServer!
  rating: Int
}

input PubgProfileCreateOneInput {
  create: PubgProfileCreateInput
  connect: PubgProfileWhereUniqueInput
}

"""An edge in a connection."""
type PubgProfileEdge {
  """The item at the end of the edge."""
  node: PubgProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PubgProfileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  server_ASC
  server_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PubgProfilePreviousValues {
  id: ID!
  name: String!
  server: PubgServer!
  rating: Int
}

type PubgProfileSubscriptionPayload {
  mutation: MutationType!
  node: PubgProfile
  updatedFields: [String!]
  previousValues: PubgProfilePreviousValues
}

input PubgProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PubgProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PubgProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PubgProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PubgProfileWhereInput
}

input PubgProfileUpdateDataInput {
  name: String
  server: PubgServer
  rating: Int
}

input PubgProfileUpdateInput {
  name: String
  server: PubgServer
  rating: Int
}

input PubgProfileUpdateOneInput {
  create: PubgProfileCreateInput
  connect: PubgProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PubgProfileUpdateDataInput
  upsert: PubgProfileUpsertNestedInput
}

input PubgProfileUpsertNestedInput {
  update: PubgProfileUpdateDataInput!
  create: PubgProfileCreateInput!
}

input PubgProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [PubgProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [PubgProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PubgProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  server: PubgServer

  """All values that are not equal to given value."""
  server_not: PubgServer

  """All values that are contained in given list."""
  server_in: [PubgServer!]

  """All values that are not contained in given list."""
  server_not_in: [PubgServer!]
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
}

input PubgProfileWhereUniqueInput {
  id: ID
}

enum PubgServer {
  KAKAO
  KR
  AS
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  interests(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest]!
  lolProfiles(where: LolProfileWhereInput, orderBy: LolProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LolProfile]!
  pubgProfiles(where: PubgProfileWhereInput, orderBy: PubgProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PubgProfile]!
  overwatchProfiles(where: OverwatchProfileWhereInput, orderBy: OverwatchProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OverwatchProfile]!
  etcGamesProfiles(where: EtcGamesProfileWhereInput, orderBy: EtcGamesProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EtcGamesProfile]!
  soccerProfiles(where: SoccerProfileWhereInput, orderBy: SoccerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SoccerProfile]!
  basketBallProfiles(where: BasketBallProfileWhereInput, orderBy: BasketBallProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasketBallProfile]!
  etcSportsProfiles(where: EtcSportsProfileWhereInput, orderBy: EtcSportsProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EtcSportsProfile]!
  anyProfiles(where: AnyProfileWhereInput, orderBy: AnyProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnyProfile]!
  user(where: UserWhereUniqueInput!): User
  team(where: TeamWhereUniqueInput!): Team
  event(where: EventWhereUniqueInput!): Event
  interest(where: InterestWhereUniqueInput!): Interest
  lolProfile(where: LolProfileWhereUniqueInput!): LolProfile
  pubgProfile(where: PubgProfileWhereUniqueInput!): PubgProfile
  overwatchProfile(where: OverwatchProfileWhereUniqueInput!): OverwatchProfile
  etcGamesProfile(where: EtcGamesProfileWhereUniqueInput!): EtcGamesProfile
  soccerProfile(where: SoccerProfileWhereUniqueInput!): SoccerProfile
  basketBallProfile(where: BasketBallProfileWhereUniqueInput!): BasketBallProfile
  etcSportsProfile(where: EtcSportsProfileWhereUniqueInput!): EtcSportsProfile
  anyProfile(where: AnyProfileWhereUniqueInput!): AnyProfile
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  interestsConnection(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterestConnection!
  lolProfilesConnection(where: LolProfileWhereInput, orderBy: LolProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LolProfileConnection!
  pubgProfilesConnection(where: PubgProfileWhereInput, orderBy: PubgProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PubgProfileConnection!
  overwatchProfilesConnection(where: OverwatchProfileWhereInput, orderBy: OverwatchProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OverwatchProfileConnection!
  etcGamesProfilesConnection(where: EtcGamesProfileWhereInput, orderBy: EtcGamesProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EtcGamesProfileConnection!
  soccerProfilesConnection(where: SoccerProfileWhereInput, orderBy: SoccerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SoccerProfileConnection!
  basketBallProfilesConnection(where: BasketBallProfileWhereInput, orderBy: BasketBallProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BasketBallProfileConnection!
  etcSportsProfilesConnection(where: EtcSportsProfileWhereInput, orderBy: EtcSportsProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EtcSportsProfileConnection!
  anyProfilesConnection(where: AnyProfileWhereInput, orderBy: AnyProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnyProfileConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum SoccerPosition {
  FILL
  L
  C
  R
}

type SoccerProfile implements Node {
  id: ID!
  description: String
  role: SoccerRole
  position: SoccerPosition
}

"""A connection to a list of items."""
type SoccerProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SoccerProfileEdge]!
  aggregate: AggregateSoccerProfile!
}

input SoccerProfileCreateInput {
  description: String
  role: SoccerRole
  position: SoccerPosition
}

input SoccerProfileCreateOneInput {
  create: SoccerProfileCreateInput
  connect: SoccerProfileWhereUniqueInput
}

"""An edge in a connection."""
type SoccerProfileEdge {
  """The item at the end of the edge."""
  node: SoccerProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SoccerProfileOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  role_ASC
  role_DESC
  position_ASC
  position_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SoccerProfilePreviousValues {
  id: ID!
  description: String
  role: SoccerRole
  position: SoccerPosition
}

type SoccerProfileSubscriptionPayload {
  mutation: MutationType!
  node: SoccerProfile
  updatedFields: [String!]
  previousValues: SoccerProfilePreviousValues
}

input SoccerProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SoccerProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SoccerProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SoccerProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SoccerProfileWhereInput
}

input SoccerProfileUpdateDataInput {
  description: String
  role: SoccerRole
  position: SoccerPosition
}

input SoccerProfileUpdateInput {
  description: String
  role: SoccerRole
  position: SoccerPosition
}

input SoccerProfileUpdateOneInput {
  create: SoccerProfileCreateInput
  connect: SoccerProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SoccerProfileUpdateDataInput
  upsert: SoccerProfileUpsertNestedInput
}

input SoccerProfileUpsertNestedInput {
  update: SoccerProfileUpdateDataInput!
  create: SoccerProfileCreateInput!
}

input SoccerProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [SoccerProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [SoccerProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SoccerProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  role: SoccerRole

  """All values that are not equal to given value."""
  role_not: SoccerRole

  """All values that are contained in given list."""
  role_in: [SoccerRole!]

  """All values that are not contained in given list."""
  role_not_in: [SoccerRole!]
  position: SoccerPosition

  """All values that are not equal to given value."""
  position_not: SoccerPosition

  """All values that are contained in given list."""
  position_in: [SoccerPosition!]

  """All values that are not contained in given list."""
  position_not_in: [SoccerPosition!]
}

input SoccerProfileWhereUniqueInput {
  id: ID
}

enum SoccerRole {
  FILL
  GK
  D
  M
  F
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  interest(where: InterestSubscriptionWhereInput): InterestSubscriptionPayload
  lolProfile(where: LolProfileSubscriptionWhereInput): LolProfileSubscriptionPayload
  pubgProfile(where: PubgProfileSubscriptionWhereInput): PubgProfileSubscriptionPayload
  overwatchProfile(where: OverwatchProfileSubscriptionWhereInput): OverwatchProfileSubscriptionPayload
  etcGamesProfile(where: EtcGamesProfileSubscriptionWhereInput): EtcGamesProfileSubscriptionPayload
  soccerProfile(where: SoccerProfileSubscriptionWhereInput): SoccerProfileSubscriptionPayload
  basketBallProfile(where: BasketBallProfileSubscriptionWhereInput): BasketBallProfileSubscriptionPayload
  etcSportsProfile(where: EtcSportsProfileSubscriptionWhereInput): EtcSportsProfileSubscriptionPayload
  anyProfile(where: AnyProfileSubscriptionWhereInput): AnyProfileSubscriptionPayload
}

type Team implements Node {
  id: ID!
  category: Category
  name: String
  description: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  logoUrl: String
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  category: Category
  name: String
  description: String
  logoUrl: String
  members: UserCreateManyWithoutTeamsInput
}

input TeamCreateManyWithoutMembersInput {
  create: [TeamCreateWithoutMembersInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateWithoutMembersInput {
  category: Category
  name: String
  description: String
  logoUrl: String
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  logoUrl_ASC
  logoUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamPreviousValues {
  id: ID!
  category: Category
  name: String
  description: String
  logoUrl: String
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateInput {
  category: Category
  name: String
  description: String
  logoUrl: String
  members: UserUpdateManyWithoutTeamsInput
}

input TeamUpdateManyWithoutMembersInput {
  create: [TeamCreateWithoutMembersInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutMembersInput!]
}

input TeamUpdateWithoutMembersDataInput {
  category: Category
  name: String
  description: String
  logoUrl: String
}

input TeamUpdateWithWhereUniqueWithoutMembersInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutMembersDataInput!
}

input TeamUpsertWithWhereUniqueWithoutMembersInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: Category

  """All values that are not equal to given value."""
  category_not: Category

  """All values that are contained in given list."""
  category_in: [Category!]

  """All values that are not contained in given list."""
  category_not_in: [Category!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  logoUrl: String

  """All values that are not equal to given value."""
  logoUrl_not: String

  """All values that are contained in given list."""
  logoUrl_in: [String!]

  """All values that are not contained in given list."""
  logoUrl_not_in: [String!]

  """All values less than the given value."""
  logoUrl_lt: String

  """All values less than or equal the given value."""
  logoUrl_lte: String

  """All values greater than the given value."""
  logoUrl_gt: String

  """All values greater than or equal the given value."""
  logoUrl_gte: String

  """All values containing the given string."""
  logoUrl_contains: String

  """All values not containing the given string."""
  logoUrl_not_contains: String

  """All values starting with the given string."""
  logoUrl_starts_with: String

  """All values not starting with the given string."""
  logoUrl_not_starts_with: String

  """All values ending with the given string."""
  logoUrl_ends_with: String

  """All values not ending with the given string."""
  logoUrl_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
}

input TeamWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  avatarUrl: String
  interests(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String
  avatarUrl: String
  teams: TeamCreateManyWithoutMembersInput
  events: EventCreateManyWithoutOwnerInput
  interests: InterestCreateManyWithoutUserInput
}

input UserCreateManyWithoutTeamsInput {
  create: [UserCreateWithoutTeamsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEventsInput {
  name: String
  avatarUrl: String
  teams: TeamCreateManyWithoutMembersInput
  interests: InterestCreateManyWithoutUserInput
}

input UserCreateWithoutInterestsInput {
  name: String
  avatarUrl: String
  teams: TeamCreateManyWithoutMembersInput
  events: EventCreateManyWithoutOwnerInput
}

input UserCreateWithoutTeamsInput {
  name: String
  avatarUrl: String
  events: EventCreateManyWithoutOwnerInput
  interests: InterestCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  avatarUrl_ASC
  avatarUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  avatarUrl: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  avatarUrl: String
  teams: TeamUpdateManyWithoutMembersInput
  events: EventUpdateManyWithoutOwnerInput
  interests: InterestUpdateManyWithoutUserInput
}

input UserUpdateManyWithoutTeamsInput {
  create: [UserCreateWithoutTeamsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeamsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeamsInput!]
}

input UserUpdateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutInterestsDataInput
  upsert: UserUpsertWithoutInterestsInput
}

input UserUpdateWithoutEventsDataInput {
  name: String
  avatarUrl: String
  teams: TeamUpdateManyWithoutMembersInput
  interests: InterestUpdateManyWithoutUserInput
}

input UserUpdateWithoutInterestsDataInput {
  name: String
  avatarUrl: String
  teams: TeamUpdateManyWithoutMembersInput
  events: EventUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTeamsDataInput {
  name: String
  avatarUrl: String
  events: EventUpdateManyWithoutOwnerInput
  interests: InterestUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutTeamsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeamsDataInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutInterestsInput {
  update: UserUpdateWithoutInterestsDataInput!
  create: UserCreateWithoutInterestsInput!
}

input UserUpsertWithWhereUniqueWithoutTeamsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeamsDataInput!
  create: UserCreateWithoutTeamsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  avatarUrl: String

  """All values that are not equal to given value."""
  avatarUrl_not: String

  """All values that are contained in given list."""
  avatarUrl_in: [String!]

  """All values that are not contained in given list."""
  avatarUrl_not_in: [String!]

  """All values less than the given value."""
  avatarUrl_lt: String

  """All values less than or equal the given value."""
  avatarUrl_lte: String

  """All values greater than the given value."""
  avatarUrl_gt: String

  """All values greater than or equal the given value."""
  avatarUrl_gte: String

  """All values containing the given string."""
  avatarUrl_contains: String

  """All values not containing the given string."""
  avatarUrl_not_contains: String

  """All values starting with the given string."""
  avatarUrl_starts_with: String

  """All values not starting with the given string."""
  avatarUrl_not_starts_with: String

  """All values ending with the given string."""
  avatarUrl_ends_with: String

  """All values not ending with the given string."""
  avatarUrl_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  interests_every: InterestWhereInput
  interests_some: InterestWhereInput
  interests_none: InterestWhereInput
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
